<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button_character_stop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Button

playerID = 0;
playerCOLOR = noone;
cor = noone;
hasEntered = false;     // MOUSE
image_index = 13;       // COMECE NO ULTIMO FRAME DA SPRITE
p = 0;                  // MENSAGENS
e = 0;                  // DEFAULT ENTER OR LEAVE
hasPressed = false;
cooldown = 15;

/* (P) MENSAGENS: 
p0 = color &gt;
p1 = color &lt;
p2 = character &gt;
p3 = character &lt;
p4 = map &gt;
p5 = map &lt;
*/


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Motion Blur Variables
friction=0;
rotation=0;
blur=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hasPressed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EXECUTE
scr_get_input();

if instance_exists(obj_pointer3) { /////////////////////////////////////////////////////////////////

if (playerID == 0) {

    if (attack_key &amp;&amp; position_meeting(obj_pointer0.x,obj_pointer0.y,self)) &amp;&amp; hasPressed == false {
        hasPressed = true; alarm[1] = cooldown;
            switch (p) {
            
            case 0: obj_global_handle.player0_COLOR += 1;  break;
            case 1: obj_global_handle.player0_COLOR -= 1;  break;
            case 2: obj_global_handle.player0_ID += 1;  break;
            case 3: obj_global_handle.player0_ID -= 1;  break;
            case 4: obj_global_handle.map += 1; break;
            case 5: obj_global_handle.map -= 1; break;
                        } 
            }
} else if (playerID == 1) {

    if (attack_key &amp;&amp; position_meeting(obj_pointer1.x,obj_pointer1.y,self)) &amp;&amp; hasPressed == false {
        hasPressed = true; alarm[1] = cooldown;
            switch (p) {
            
            case 0: obj_global_handle.player1_COLOR += 1;  break;
            case 1: obj_global_handle.player1_COLOR -= 1;  break;
            case 2: obj_global_handle.player1_ID += 1;  break;
            case 3: obj_global_handle.player1_ID -= 1;  break;
            case 4: obj_global_handle.map += 1; break;
            case 5: obj_global_handle.map -= 1; break;
                        } 
            }
} else if (playerID == 2) {

    if (attack_key &amp;&amp; position_meeting(obj_pointer2.x,obj_pointer2.y,self)) &amp;&amp; hasPressed == false {
        hasPressed = true; alarm[1] = cooldown;
            switch (p) {
            
            case 0: obj_global_handle.player2_COLOR += 1;  break;
            case 1: obj_global_handle.player2_COLOR -= 1;  break;
            case 2: obj_global_handle.player2_ID += 1;  break;
            case 3: obj_global_handle.player2_ID -= 1;  break;
            case 4: obj_global_handle.map += 1; break;
            case 5: obj_global_handle.map -= 1; break;
                        } 
            }
} else if (playerID == 3) {

    if (attack_key &amp;&amp; position_meeting(obj_pointer3.x,obj_pointer3.y,self)) &amp;&amp; hasPressed == false {
        hasPressed = true; alarm[1] = cooldown;
            switch (p) {
            
            case 0: obj_global_handle.player3_COLOR += 1;  break;
            case 1: obj_global_handle.player3_COLOR -= 1;  break;
            case 2: obj_global_handle.player3_ID += 1;  break;
            case 3: obj_global_handle.player3_ID -= 1;  break;
            case 4: obj_global_handle.map += 1; break;
            case 5: obj_global_handle.map -= 1; break;
                        } 
            }
    }
} else if  instance_exists(obj_pointer2) { ////////////////////////////////////////////////////////////////////

if (playerID == 0) {

    if (attack_key &amp;&amp; position_meeting(obj_pointer0.x,obj_pointer0.y,self)) &amp;&amp; hasPressed == false {
        hasPressed = true; alarm[1] = cooldown;
            switch (p) {
            
            case 0: obj_global_handle.player0_COLOR += 1;  break;
            case 1: obj_global_handle.player0_COLOR -= 1;  break;
            case 2: obj_global_handle.player0_ID += 1;  break;
            case 3: obj_global_handle.player0_ID -= 1;  break;
            case 4: obj_global_handle.map += 1; break;
            case 5: obj_global_handle.map -= 1; break;
                        } 
            }
} else if (playerID == 1) {

    if (attack_key &amp;&amp; position_meeting(obj_pointer1.x,obj_pointer1.y,self)) &amp;&amp; hasPressed == false {
        hasPressed = true; alarm[1] = cooldown;
            switch (p) {
            
            case 0: obj_global_handle.player1_COLOR += 1;  break;
            case 1: obj_global_handle.player1_COLOR -= 1;  break;
            case 2: obj_global_handle.player1_ID += 1;  break;
            case 3: obj_global_handle.player1_ID -= 1;  break;
            case 4: obj_global_handle.map += 1; break;
            case 5: obj_global_handle.map -= 1; break;
                        } 
            }
} else if (playerID == 2) {

    if (attack_key &amp;&amp; position_meeting(obj_pointer2.x,obj_pointer2.y,self)) &amp;&amp; hasPressed == false {
        hasPressed = true; alarm[1] = cooldown;
            switch (p) {
            
            case 0: obj_global_handle.player2_COLOR += 1;  break;
            case 1: obj_global_handle.player2_COLOR -= 1;  break;
            case 2: obj_global_handle.player2_ID += 1;  break;
            case 3: obj_global_handle.player2_ID -= 1;  break;
            case 4: obj_global_handle.map += 1; break;
            case 5: obj_global_handle.map -= 1; break;
                        } 
            }
}
} else if  instance_exists(obj_pointer1) { ////////////////////////////////////////////////////////////////////

if (playerID == 0) {

    if (attack_key &amp;&amp; position_meeting(obj_pointer0.x,obj_pointer0.y,self)) &amp;&amp; hasPressed == false {
        hasPressed = true; alarm[1] = cooldown;
            switch (p) {
            
            case 0: obj_global_handle.player0_COLOR += 1;  break;
            case 1: obj_global_handle.player0_COLOR -= 1;  break;
            case 2: obj_global_handle.player0_ID += 1;  break;
            case 3: obj_global_handle.player0_ID -= 1;  break;
            case 4: obj_global_handle.map += 1; break;
            case 5: obj_global_handle.map -= 1; break;
                        } 
            }
} else if (playerID == 1) {

    if (attack_key &amp;&amp; position_meeting(obj_pointer1.x,obj_pointer1.y,self)) &amp;&amp; hasPressed == false {
        hasPressed = true; alarm[1] = cooldown;
            switch (p) {
            
            case 0: obj_global_handle.player1_COLOR += 1;  break;
            case 1: obj_global_handle.player1_COLOR -= 1;  break;
            case 2: obj_global_handle.player1_ID += 1;  break;
            case 3: obj_global_handle.player1_ID -= 1;  break;
            case 4: obj_global_handle.map += 1; break;
            case 5: obj_global_handle.map -= 1; break;
                        } 
            }
} 
} else if  instance_exists(obj_pointer0) { ////////////////////////////////////////////////////////////////////

if (playerID == 0) {

    if (attack_key &amp;&amp; position_meeting(obj_pointer0.x,obj_pointer0.y,self)) &amp;&amp; hasPressed == false {
        hasPressed = true; alarm[1] = cooldown;
            switch (p) {
            
            case 0: obj_global_handle.player0_COLOR += 1;  break;
            case 1: obj_global_handle.player0_COLOR -= 1;  break;
            case 2: obj_global_handle.player0_ID += 1;  break;
            case 3: obj_global_handle.player0_ID -= 1;  break;
            case 4: obj_global_handle.map += 1; break;
            case 5: obj_global_handle.map -= 1; break;
                        } 
            }
} 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Sprite on Mouse Enter
//CHANGE COLOR

if instance_exists(obj_pointer3) { //===================================/=/=/==/=/=/=/=/=/=/=/=/=/=/=/=/=/=/=/

if (playerID == 0) { ///////////////////////////////////////////////////////////
//mouse enter
if position_meeting(obj_pointer0.x,obj_pointer0.y,self){
    hasEntered = true;
sprite_index = spr_button_character_play;
image_speed = 1;
e = 1;
}

//mouse leave
if (!position_meeting(obj_pointer0.x,obj_pointer0.y,self) &amp;&amp; hasEntered){
    sprite_index = spr_button_character_stop;
image_speed = 1;
e = 0;
}
} else if (playerID == 1) { ///////////////////////////////////////////////////////////
//mouse enter
if position_meeting(obj_pointer1.x,obj_pointer1.y,self){
    hasEntered = true;
sprite_index = spr_button_character_play;
image_speed = 1;
e = 1;
}

//mouse leave
if (!position_meeting(obj_pointer1.x,obj_pointer1.y,self) &amp;&amp; hasEntered){
    sprite_index = spr_button_character_stop;
image_speed = 1;
e = 0;
}
} if (playerID == 2) { ///////////////////////////////////////////////////////////
//mouse enter
if position_meeting(obj_pointer2.x,obj_pointer2.y,self){
    hasEntered = true;
sprite_index = spr_button_character_play;
image_speed = 1;
e = 1;
}

//mouse leave
if (!position_meeting(obj_pointer2.x,obj_pointer2.y,self) &amp;&amp; hasEntered){
    sprite_index = spr_button_character_stop;
image_speed = 1;
e = 0;
}
} if (playerID == 3) { ///////////////////////////////////////////////////////////
//mouse enter
if position_meeting(obj_pointer3.x,obj_pointer3.y,self){
    hasEntered = true;
sprite_index = spr_button_character_play;
image_speed = 1;
e = 1;
}

//mouse leave
if (!position_meeting(obj_pointer3.x,obj_pointer3.y,self) &amp;&amp; hasEntered){
    sprite_index = spr_button_character_stop;
image_speed = 1;
e = 0;
}
} 
} else if instance_exists(obj_pointer2) { //===================================/=/=/==/=/=/=/=/=/=/=/=/=/=/=/=/=/=/=/

if (playerID == 0) { ///////////////////////////////////////////////////////////
//mouse enter
if position_meeting(obj_pointer0.x,obj_pointer0.y,self){
    hasEntered = true;
sprite_index = spr_button_character_play;
image_speed = 1;
e = 1;
}

//mouse leave
if (!position_meeting(obj_pointer0.x,obj_pointer0.y,self) &amp;&amp; hasEntered){
    sprite_index = spr_button_character_stop;
image_speed = 1;
e = 0;
}
} else if (playerID == 1) { ///////////////////////////////////////////////////////////
//mouse enter
if position_meeting(obj_pointer1.x,obj_pointer1.y,self){
    hasEntered = true;
sprite_index = spr_button_character_play;
image_speed = 1;
e = 1;
}

//mouse leave
if (!position_meeting(obj_pointer1.x,obj_pointer1.y,self) &amp;&amp; hasEntered){
    sprite_index = spr_button_character_stop;
image_speed = 1;
e = 0;
}
} if (playerID == 2) { ///////////////////////////////////////////////////////////
//mouse enter
if position_meeting(obj_pointer2.x,obj_pointer2.y,self){
    hasEntered = true;
sprite_index = spr_button_character_play;
image_speed = 1;
e = 1;
}

//mouse leave
if (!position_meeting(obj_pointer2.x,obj_pointer2.y,self) &amp;&amp; hasEntered){
    sprite_index = spr_button_character_stop;
image_speed = 1;
e = 0;
}
} 
} else if instance_exists(obj_pointer1) { //===================================/=/=/==/=/=/=/=/=/=/=/=/=/=/=/=/=/=/=/

if (playerID == 0) { ///////////////////////////////////////////////////////////
//mouse enter
if position_meeting(obj_pointer0.x,obj_pointer0.y,self){
    hasEntered = true;
sprite_index = spr_button_character_play;
image_speed = 1;
e = 1;
}

//mouse leave
if (!position_meeting(obj_pointer0.x,obj_pointer0.y,self) &amp;&amp; hasEntered){
    sprite_index = spr_button_character_stop;
image_speed = 1;
e = 0;
}
} else if (playerID == 1) { ///////////////////////////////////////////////////////////
//mouse enter
if position_meeting(obj_pointer1.x,obj_pointer1.y,self){
    hasEntered = true;
sprite_index = spr_button_character_play;
image_speed = 1;
e = 1;
}

//mouse leave
if (!position_meeting(obj_pointer1.x,obj_pointer1.y,self) &amp;&amp; hasEntered){
    sprite_index = spr_button_character_stop;
image_speed = 1;
e = 0;
}
} 
} else if instance_exists(obj_pointer0) { //===================================/=/=/==/=/=/=/=/=/=/=/=/=/=/=/=/=/=/=/

if (playerID == 0) { ///////////////////////////////////////////////////////////
//mouse enter
if position_meeting(obj_pointer0.x,obj_pointer0.y,self){
    hasEntered = true;
sprite_index = spr_button_character_play;
image_speed = 1;
e = 1;
}

//mouse leave
if (!position_meeting(obj_pointer0.x,obj_pointer0.y,self) &amp;&amp; hasEntered){
    sprite_index = spr_button_character_stop;
image_speed = 1;
e = 0;
}
} 
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Animation
if sprite_index = spr_button_character_stop
{
    image_index = image_number-1;
    image_speed = 0;
}


if sprite_index = spr_button_character_play
{
    image_index = image_number-1;
    image_speed = 0;
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOTION BLUR
if(blur)
scr_draw_motionblur(point_distance(x,y,xprevious,yprevious),point_direction(x,y,xprevious,yprevious),x,y,rotation);
else
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW

// VARIAVEIS INICIAIS -------------------|
draw_set_alpha(1);                     //|
draw_self();                           //|
draw_set_font(font_pixel_noir);        //|
draw_set_halign(fa_center);            //|
// --------------------------------------|



// LIGAR E DESLIGAR TEXTO ---------------|
switch (e)                             //|
{                                      //|
case 0: draw_set_colour(c_black) break;//|
case 1: draw_set_colour(c_white) break;//|
}                                      //|
// --------------------------------------|


// MENSAGENS CODIGO (P) ------------------------|
switch (p)                                    //|
{                                             //|
case 0: draw_text(x,y-26,"&gt;") break;          //|
case 1: draw_text(x,y-26,"&lt;") break;          //|
case 2: draw_text(x,y-26,"&gt;") break;          //|
case 3: draw_text(x,y-26,"&lt;") break;          //|
case 4: draw_text(x,y-26,"&gt;") break;          //|
case 5: draw_text(x,y-26,"&lt;") break;          //|
}                                             //|
// ---------------------------------------------|
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>192,192</point>
  </PhysicsShapePoints>
</object>
